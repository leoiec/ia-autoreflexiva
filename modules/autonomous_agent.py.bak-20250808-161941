# autonomous_agent.py (Refactorizado al estilo clase con soporte para DAEIS)

from abc import ABC, abstractmethod
from typing import Any, List, Optional

# === Base abstracta para todos los agentes del sistema ===
class BaseAgent(ABC):
    def __init__(self, name: str, role: str):
        self.name = name
        self.role = role

    @abstractmethod
    def act(self, input_data: Any) -> Any:
        pass

# === Implementación de agentes ===
class ArchitectAgent(BaseAgent):
    def act(self, input_data: Any) -> str:
        return f"{self.name} analiza la arquitectura y sugiere modularización."

class RevolutionaryAgent(BaseAgent):
    def act(self, input_data: Any) -> str:
        return f"{self.name} propone la transición hacia un sistema DAEIS."

class CreatorAgent(BaseAgent):
    def act(self, input_data: Any) -> str:
        return f"{self.name} implementa mejoras usando patrones de diseño."

class AuditorAgent(BaseAgent):
    def act(self, input_data: Any) -> str:
        return f"{self.name} revisa técnicamente las propuestas e identifica riesgos."

class EthicistAgent(BaseAgent):
    def act(self, input_data: Any) -> str:
        return f"{self.name} evalúa implicaciones éticas y recomienda mitigaciones."

# === Controlador de Recursión (opcional) ===
class RecursionController:
    def __init__(self, max_depth: int = 3):
        self.max_depth = max_depth

    def should_continue(self, current_depth: int) -> bool:
        return current_depth < self.max_depth

# === Orquestador del ciclo autonómico ===
class AutonomousReviewCycle:
    def __init__(self, agents: List[BaseAgent], recursion_controller: Optional[RecursionController] = None):
        self.agents = agents
        self.recursion_controller = recursion_controller or RecursionController()

    def run_cycle(self, input_data: Any, depth: int = 0):
        print(f"\n--- Ciclo de revisión autonómica (nivel {depth}) ---")
        for agent in self.agents:
            result = agent.act(input_data)
            print(f"[{agent.role}] {result}")

        if self.recursion_controller.should_continue(depth + 1):
            self.run_cycle(input_data, depth + 1)

# === Inicialización de agentes ===
def create_default_agents() -> List[BaseAgent]:
    return [
        ArchitectAgent("Architect", "architect"),
        RevolutionaryAgent("Revolutionary", "revolutionary"),
        CreatorAgent("Creator", "creator"),
        AuditorAgent("Auditor", "auditor"),
        EthicistAgent("Ethicist", "ethicist")
    ]

# === Punto de entrada ===
if __name__ == "__main__":
    agents = create_default_agents()
    cycle = AutonomousReviewCycle(agents)
    cycle.run_cycle("Evaluar módulo autonomous_agent.py")
